{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx\";\nimport React, { useState, useEffect } from \"react\";\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([{\n    label: \"Commercial Loans\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Credit Card Lines\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Total Unfunded Commitments\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }]);\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    // const calculatedLines = lines.slice().map(item => {\n    //   const label = item.label;\n    //   const totalUnfundedCom = item.totalUnfundedCom;\n    //   const unconditionallyCancellable = item.unconditionallyCancellable;\n    //   const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n    //   const estimatedProbabilityOfFunding = item.estimatedProbabilityOfFunding;\n    //   const wtdAverageRemaining = item.wtdAverageRemaining;\n    //   const annualExpected = item.annualExpected;\n    //   const expectedLifetime =\n    //     parseFloat(estimatedProbabilityOfFunding) *\n    //     parseInt(wtdAverageRemaining) *\n    //     parseFloat(annualExpected);\n    //   const impliedCecl = expectedLifetime * netUnfunded;\n    //   return {\n    //     label,\n    //     totalUnfundedCom,\n    //     unconditionallyCancellable,\n    //     netUnfunded,\n    //     estimatedProbabilityOfFunding,\n    //     wtdAverageRemaining,\n    //     annualExpected,\n    //     expectedLifetime,\n    //     impliedCecl\n    //   };\n    // });\n    let copy = [];\n    let linesCopy = lines.slice();\n    linesCopy.forEach((element, index) => {\n      const label = element.label;\n      const totalUnfundedCom = element.totalUnfundedCom;\n      const unconditionallyCancellable = element.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding = element.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = element.wtdAverageRemaining;\n      const annualExpected = element.annualExpected;\n      const expectedLifetime = parseFloat(estimatedProbabilityOfFunding) * parseInt(wtdAverageRemaining) * parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n      copy.push({\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      });\n    });\n    setLines(copy); // linesCopy[0] = calculatedLines[0];\n    // linesCopy[1] = calculatedLines[1];\n    // linesCopy[2] = calculatedLines[2];\n\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom: parseInt(total.totalUnfundedCom) + parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable: parseInt(total.unconditionallyCancellable) + parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded: parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl: parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setTotalUnfundedCom(e, index);\n      },\n      value: item.totalUnfundedCom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setUnconditionallyCancellable(e, index);\n      },\n      value: item.unconditionallyCancellable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setEstimatedProbabilityOfFunding(e, index);\n      },\n      value: item.estimatedProbabilityOfFunding,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setWtdAverageRemaining(e, index);\n      },\n      value: item.wtdAverageRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setAnnualExpected(e, index);\n      },\n      value: item.annualExpected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  const totalLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, item.totalUnfundedCom), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, item.unconditionallyCancellable), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      colSpan: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \"Unfunded Commitments:\"), React.createElement(\"td\", {\n    colSpan: \"7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Expected Future Losses:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"-\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"(E)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"(F)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"(G)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Unconditionally\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"Net\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \"Estimated\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, \"Wtd. Average\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"Annual\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, \"Cancellable\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Probability of\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, \"Remaining\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, \"Lifetime\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \"Amount (1)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, \"Funding (2)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, \"Commit. (Yrs)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, \"Loss Rate (3)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, \"Loss Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, \"CECL\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, lines.map((item, index) => {\n    if (index === lines.length - 1) {\n      return totalLine(item, index);\n    }\n\n    return simpleLine(item, index);\n  })));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx"],"names":["React","useState","useEffect","UnfundedCommitments","lines","setLines","label","totalUnfundedCom","unconditionallyCancellable","netUnfunded","estimatedProbabilityOfFunding","wtdAverageRemaining","annualExpected","expectedLifetime","impliedCecl","calculateAllValues","copy","linesCopy","slice","forEach","element","index","parseFloat","parseInt","push","calculateTotalValues","total","reduce","currentItem","length","sum","totalUnconditionallyCancellable","totalNetUnfunded","totalImpliedCecl","item","filter","setTotalUnfundedCom","e","itemFromLines","target","value","setUnconditionallyCancellable","setEstimatedProbabilityOfFunding","setWtdAverageRemaining","setAnnualExpected","simpleLine","totalLine","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([\n    {\n      label: \"Commercial Loans\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Credit Card Lines\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Total Unfunded Commitments\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    }\n  ]);\n\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    // const calculatedLines = lines.slice().map(item => {\n    //   const label = item.label;\n    //   const totalUnfundedCom = item.totalUnfundedCom;\n    //   const unconditionallyCancellable = item.unconditionallyCancellable;\n    //   const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n    //   const estimatedProbabilityOfFunding = item.estimatedProbabilityOfFunding;\n    //   const wtdAverageRemaining = item.wtdAverageRemaining;\n    //   const annualExpected = item.annualExpected;\n    //   const expectedLifetime =\n    //     parseFloat(estimatedProbabilityOfFunding) *\n    //     parseInt(wtdAverageRemaining) *\n    //     parseFloat(annualExpected);\n    //   const impliedCecl = expectedLifetime * netUnfunded;\n\n    //   return {\n    //     label,\n    //     totalUnfundedCom,\n    //     unconditionallyCancellable,\n    //     netUnfunded,\n    //     estimatedProbabilityOfFunding,\n    //     wtdAverageRemaining,\n    //     annualExpected,\n    //     expectedLifetime,\n    //     impliedCecl\n    //   };\n    // });\n\n    let copy = [];\n\n    let linesCopy = lines.slice();\n    linesCopy.forEach((element, index) => {\n      const label = element.label;\n      const totalUnfundedCom = element.totalUnfundedCom;\n      const unconditionallyCancellable = element.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding =\n        element.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = element.wtdAverageRemaining;\n      const annualExpected = element.annualExpected;\n      const expectedLifetime =\n        parseFloat(estimatedProbabilityOfFunding) *\n        parseInt(wtdAverageRemaining) *\n        parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n\n      copy.push({\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      });\n    });\n\n    setLines(copy);\n\n    // linesCopy[0] = calculatedLines[0];\n    // linesCopy[1] = calculatedLines[1];\n    // linesCopy[2] = calculatedLines[2];\n\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom:\n            parseInt(total.totalUnfundedCom) +\n            parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable:\n            parseInt(total.unconditionallyCancellable) +\n            parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded:\n            parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl:\n            parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setTotalUnfundedCom(e, index);\n            }}\n            value={item.totalUnfundedCom}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setUnconditionallyCancellable(e, index);\n            }}\n            value={item.unconditionallyCancellable}\n          />\n        </td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setEstimatedProbabilityOfFunding(e, index);\n            }}\n            value={item.estimatedProbabilityOfFunding}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setWtdAverageRemaining(e, index);\n            }}\n            value={item.wtdAverageRemaining}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setAnnualExpected(e, index);\n            }}\n            value={item.annualExpected}\n          />\n        </td>\n        <td></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  const totalLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>{item.totalUnfundedCom}</td>\n        <td></td>\n        <td>{item.unconditionallyCancellable}</td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td colSpan=\"6\"></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td></td>\n          <td colSpan=\"5\">Unfunded Commitments:</td>\n          <td colSpan=\"7\">Expected Future Losses:</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>(A)</td>\n          <td>-</td>\n          <td>(B)</td>\n          <td>=</td>\n          <td>(C)</td>\n          <td>(D)</td>\n          <td>x</td>\n          <td>(E)</td>\n          <td>x</td>\n          <td>(F)</td>\n          <td>=</td>\n          <td>(G)</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Total</td>\n          <td></td>\n          <td>Unconditionally</td>\n          <td></td>\n          <td>Net</td>\n          <td>Estimated</td>\n          <td></td>\n          <td>Wtd. Average</td>\n          <td></td>\n          <td>Annual</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Unfunded</td>\n          <td></td>\n          <td>Cancellable</td>\n          <td></td>\n          <td>Unfunded</td>\n          <td>Probability of</td>\n          <td></td>\n          <td>Remaining</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td>Lifetime</td>\n          <td></td>\n          <td>Implied</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Commitment</td>\n          <td></td>\n          <td>Amount (1)</td>\n          <td></td>\n          <td>Commitment</td>\n          <td>Funding (2)</td>\n          <td></td>\n          <td>Commit. (Yrs)</td>\n          <td></td>\n          <td>Loss Rate (3)</td>\n          <td></td>\n          <td>Loss Rate</td>\n          <td></td>\n          <td>CECL</td>\n        </tr>\n      </thead>\n      <tbody>\n        {lines.map((item, index) => {\n          if (index === lines.length - 1) {\n            return totalLine(item, index);\n          }\n          return simpleLine(item, index);\n        })}\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}