{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport SummaryResults from \"./SummaryResults\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [lines, setLines] = useState([{\n    fieldId: 1,\n    label: \"Unsecured Credit Card Loans\",\n    years: 5,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 2,\n    label: \"New Vehicle Loans\",\n    years: 4,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios.get(`https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`).then(result => {\n      const {\n        averageLoans,\n        netChargeoffsSum\n      } = result.data;\n      let linesCopy = lines.slice();\n      let item = linesCopy.filter(item => item.fieldId === fieldId);\n      item[0].averageLoans = averageLoans;\n      item[0].netChargeoffsSum = netChargeoffsSum;\n      item[0].historicalRate = netChargeoffsSum / averageLoans;\n      item[0].futureRate = parseFloat(item[0].historicalRate) + parseFloat(item[0].userAdjustments / 100);\n      item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n      setLines(linesCopy);\n    });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const formatAsPercentage = value => {\n    return `${(value * 100).toFixed(2)}%`;\n  };\n\n  const formatAsDolarNumber = value => {\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2\n    });\n    return `${formatter.format(value)}`;\n  };\n\n  return React.createElement(SummaryResults, {\n    setUserAdjustmentsCb: setUserAdjustments,\n    loadLineByYearsAndFieldIdCb: loadLineByYearsAndFieldId,\n    setYearsCb: setYears,\n    lines: lines,\n    formatAsPercentage: formatAsPercentage,\n    formatAsPercentageCb: formatAsPercentage,\n    formatAsDolarNumberCb: formatAsDolarNumber,\n    setCurrentBalanceCb: setCurrentBalance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/App.js"],"names":["React","useEffect","useState","SummaryResults","axios","App","lines","setLines","fieldId","label","years","averageLoans","netChargeoffsSum","historicalRate","userAdjustments","futureRate","currentBalance","impliedResult","loadLineByYearsAndFieldId","get","then","result","data","linesCopy","slice","item","filter","parseFloat","setYears","e","target","value","copy","itemFromLines","t","setUserAdjustments","setCurrentBalance","formatAsPercentage","toFixed","formatAsDolarNumber","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","format"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SummaryResults from \"./SummaryResults\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [lines, setLines] = useState([\n    {\n      fieldId: 1,\n      label: \"Unsecured Credit Card Loans\",\n      years: 5,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 2,\n      label: \"New Vehicle Loans\",\n      years: 4,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    }\n  ]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios\n      .get(\n        `https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`\n      )\n      .then(result => {\n        const { averageLoans, netChargeoffsSum } = result.data;\n\n        let linesCopy = lines.slice();\n        let item = linesCopy.filter(item => item.fieldId === fieldId);\n        item[0].averageLoans = averageLoans;\n        item[0].netChargeoffsSum = netChargeoffsSum;\n        item[0].historicalRate = netChargeoffsSum / averageLoans;\n        item[0].futureRate =\n          parseFloat(item[0].historicalRate) +\n          parseFloat(item[0].userAdjustments / 100);\n\n        item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n\n        setLines(linesCopy);\n      });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const formatAsPercentage = value => {\n    return `${(value * 100).toFixed(2)}%`;\n  };\n\n  const formatAsDolarNumber = value => {\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2\n    });\n\n    return `${formatter.format(value)}`;\n  };\n\n  return (\n    <SummaryResults\n      setUserAdjustmentsCb={setUserAdjustments}\n      loadLineByYearsAndFieldIdCb={loadLineByYearsAndFieldId}\n      setYearsCb={setYears}\n      lines={lines}\n      formatAsPercentage={formatAsPercentage}\n      formatAsPercentageCb={formatAsPercentage}\n      formatAsDolarNumberCb={formatAsDolarNumber}\n      setCurrentBalanceCb={setCurrentBalance}\n    />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}