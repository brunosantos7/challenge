{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx\";\nimport React, { useState, useEffect } from \"react\";\nexport default function UnfundedCommitments({\n  ceclValue,\n  setCeclValueCb\n}) {\n  const [currentTotalAllowance, setCurrentTotalAllowance] = useState(0);\n  const [lines, setLines] = useState([{\n    label: \"Commercial Loans\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Credit Card Lines\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Total Unfunded Commitments\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }]);\n  useEffect(() => {\n    calculateValuesByLineIndex(0);\n    calculateValuesByLineIndex(1);\n  }, []);\n\n  const calculateValuesByLineIndex = index => {\n    const linesCopy = lines.slice();\n    let item = linesCopy.filter((item, lineIndex) => lineIndex === index)[0];\n    item.netUnfunded = item.totalUnfundedCom - item.unconditionallyCancellable;\n    item.expectedLifetime = parseFloat(item.estimatedProbabilityOfFunding) * parseInt(item.wtdAverageRemaining) * parseFloat(item.annualExpected);\n    item.impliedCecl = item.expectedLifetime * item.netUnfunded;\n    setLines(linesCopy);\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom: parseInt(total.totalUnfundedCom) + parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable: parseInt(total.unconditionallyCancellable) + parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded: parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl: parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n    setCeclSurplus();\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const setCeclSurplus = () => {\n    setCeclValueCb(currentTotalAllowance - lines[lines.length - 1].impliedCecl);\n  };\n\n  const isNegative = value => {\n    return value < 0;\n  };\n\n  const simpleLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => calculateValuesByLineIndex(index),\n      onChange: e => {\n        setTotalUnfundedCom(e, index);\n      },\n      value: item.totalUnfundedCom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => calculateValuesByLineIndex(index),\n      onChange: e => {\n        setUnconditionallyCancellable(e, index);\n      },\n      value: item.unconditionallyCancellable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => calculateValuesByLineIndex(index),\n      onChange: e => {\n        setEstimatedProbabilityOfFunding(e, index);\n      },\n      value: item.estimatedProbabilityOfFunding,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => calculateValuesByLineIndex(index),\n      onChange: e => {\n        setWtdAverageRemaining(e, index);\n      },\n      value: item.wtdAverageRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => calculateValuesByLineIndex(index),\n      onChange: e => {\n        setAnnualExpected(e, index);\n      },\n      value: item.annualExpected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  const totalLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, item.totalUnfundedCom), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, item.unconditionallyCancellable), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      colSpan: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  return React.createElement(\"table\", {\n    border: \"0\",\n    cellspacing: \"0\",\n    cellpadding: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    className: \"table-head\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    class: \"blue-header underline-header border-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"Unfunded Commitments:\"), React.createElement(\"td\", {\n    colSpan: \"7\",\n    class: \"blue-header underline-header \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"Expected Future Losses:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"-\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"(E)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"(F)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \"(G)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"Unconditionally\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, \"Net\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \"Estimated\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"Wtd. Average\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \"Annual\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"Cancellable\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, \"Probability of\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"Remaining\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"Lifetime\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, \"Amount (1)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Funding (2)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"Commit. (Yrs)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, \"Loss Rate (3)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, \"Loss Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"CECL\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, lines.map((item, index) => {\n    if (index === lines.length - 1) {\n      return totalLine(item, index);\n    }\n\n    return simpleLine(item, index);\n  }), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, \"Current Total Allowance for Off-Balance Sheet Credit Exposures\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onBlur: e => setCeclSurplus(),\n    onChange: e => {\n      setCurrentTotalAllowance(e.target.value);\n    },\n    value: currentTotalAllowance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, \"CECL \", isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, ceclValue))));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx"],"names":["React","useState","useEffect","UnfundedCommitments","ceclValue","setCeclValueCb","currentTotalAllowance","setCurrentTotalAllowance","lines","setLines","label","totalUnfundedCom","unconditionallyCancellable","netUnfunded","estimatedProbabilityOfFunding","wtdAverageRemaining","annualExpected","expectedLifetime","impliedCecl","calculateValuesByLineIndex","index","linesCopy","slice","item","filter","lineIndex","parseFloat","parseInt","calculateTotalValues","total","reduce","currentItem","length","sum","totalUnconditionallyCancellable","totalNetUnfunded","totalImpliedCecl","setCeclSurplus","setTotalUnfundedCom","e","copy","itemFromLines","target","value","setUnconditionallyCancellable","setEstimatedProbabilityOfFunding","setWtdAverageRemaining","setAnnualExpected","isNegative","simpleLine","totalLine","map","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function UnfundedCommitments({ ceclValue, setCeclValueCb }) {\n  const [currentTotalAllowance, setCurrentTotalAllowance] = useState(0);\n  const [lines, setLines] = useState([\n    {\n      label: \"Commercial Loans\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Credit Card Lines\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Total Unfunded Commitments\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    }\n  ]);\n\n  useEffect(() => {\n    calculateValuesByLineIndex(0);\n    calculateValuesByLineIndex(1);\n  }, []);\n\n  const calculateValuesByLineIndex = index => {\n    const linesCopy = lines.slice();\n    let item = linesCopy.filter((item, lineIndex) => lineIndex === index)[0];\n\n    item.netUnfunded = item.totalUnfundedCom - item.unconditionallyCancellable;\n    item.expectedLifetime =\n      parseFloat(item.estimatedProbabilityOfFunding) *\n      parseInt(item.wtdAverageRemaining) *\n      parseFloat(item.annualExpected);\n    item.impliedCecl = item.expectedLifetime * item.netUnfunded;\n\n    setLines(linesCopy);\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom:\n            parseInt(total.totalUnfundedCom) +\n            parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable:\n            parseInt(total.unconditionallyCancellable) +\n            parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded:\n            parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl:\n            parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n\n    setCeclSurplus();\n\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const setCeclSurplus = () => {\n    setCeclValueCb(currentTotalAllowance - lines[lines.length - 1].impliedCecl);\n  };\n\n  const isNegative = value => {\n    return value < 0;\n  };\n\n  const simpleLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={e => calculateValuesByLineIndex(index)}\n            onChange={e => {\n              setTotalUnfundedCom(e, index);\n            }}\n            value={item.totalUnfundedCom}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => calculateValuesByLineIndex(index)}\n            onChange={e => {\n              setUnconditionallyCancellable(e, index);\n            }}\n            value={item.unconditionallyCancellable}\n          />\n        </td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td>\n          <input\n            onBlur={e => calculateValuesByLineIndex(index)}\n            onChange={e => {\n              setEstimatedProbabilityOfFunding(e, index);\n            }}\n            value={item.estimatedProbabilityOfFunding}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => calculateValuesByLineIndex(index)}\n            onChange={e => {\n              setWtdAverageRemaining(e, index);\n            }}\n            value={item.wtdAverageRemaining}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => calculateValuesByLineIndex(index)}\n            onChange={e => {\n              setAnnualExpected(e, index);\n            }}\n            value={item.annualExpected}\n          />\n        </td>\n        <td></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  const totalLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>{item.totalUnfundedCom}</td>\n        <td></td>\n        <td>{item.unconditionallyCancellable}</td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td colSpan=\"6\"></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  return (\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"4\">\n      <thead className=\"table-head\">\n        <tr>\n          <td></td>\n          <td colSpan=\"5\" class=\"blue-header underline-header border-left\">\n            Unfunded Commitments:\n          </td>\n          <td colSpan=\"7\" class=\"blue-header underline-header \">\n            Expected Future Losses:\n          </td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>(A)</td>\n          <td>-</td>\n          <td>(B)</td>\n          <td>=</td>\n          <td>(C)</td>\n          <td>(D)</td>\n          <td>x</td>\n          <td>(E)</td>\n          <td>x</td>\n          <td>(F)</td>\n          <td>=</td>\n          <td>(G)</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Total</td>\n          <td></td>\n          <td>Unconditionally</td>\n          <td></td>\n          <td>Net</td>\n          <td>Estimated</td>\n          <td></td>\n          <td>Wtd. Average</td>\n          <td></td>\n          <td>Annual</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Unfunded</td>\n          <td></td>\n          <td>Cancellable</td>\n          <td></td>\n          <td>Unfunded</td>\n          <td>Probability of</td>\n          <td></td>\n          <td>Remaining</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td>Lifetime</td>\n          <td></td>\n          <td>Implied</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Commitment</td>\n          <td></td>\n          <td>Amount (1)</td>\n          <td></td>\n          <td>Commitment</td>\n          <td>Funding (2)</td>\n          <td></td>\n          <td>Commit. (Yrs)</td>\n          <td></td>\n          <td>Loss Rate (3)</td>\n          <td></td>\n          <td>Loss Rate</td>\n          <td></td>\n          <td>CECL</td>\n        </tr>\n      </thead>\n      <tbody>\n        {lines.map((item, index) => {\n          if (index === lines.length - 1) {\n            return totalLine(item, index);\n          }\n          return simpleLine(item, index);\n        })}\n        <tr></tr>\n        <tr>\n          <td colSpan=\"6\"></td>\n          <td colSpan=\"8\">\n            Current Total Allowance for Off-Balance Sheet Credit Exposures\n          </td>\n          <td>\n            <input\n              onBlur={e => setCeclSurplus()}\n              onChange={e => {\n                setCurrentTotalAllowance(e.target.value);\n              }}\n              value={currentTotalAllowance}\n            />\n          </td>\n        </tr>\n        <tr>\n          <td colSpan=\"9\"></td>\n          <td\n            colSpan=\"5\"\n            style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}\n          >\n            CECL {isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\"}\n          </td>\n          <td>{ceclValue}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}