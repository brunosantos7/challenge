{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [lines, setLines] = useState([{\n    fieldId: 1,\n    label: \"Test\",\n    years: 5,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 2,\n    label: \"Test2\",\n    years: 4,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios.get(`https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`).then(result => {\n      const {\n        averageLoans,\n        netChargeoffsSum\n      } = result.data;\n      let linesCopy = lines.slice();\n      let item = linesCopy.filter(item => item.fieldId === fieldId);\n      item[0].averageLoans = averageLoans;\n      item[0].netChargeoffsSum = netChargeoffsSum;\n      item[0].historicalRate = netChargeoffsSum / averageLoans;\n      item[0].futureRate = parseFloat(item[0].historicalRate) + parseFloat(item[0].userAdjustments / 100);\n      item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n      setLines(linesCopy);\n    });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const formatAsPercentage = value => {\n    return `${(value * 100).toFixed(2)}%`;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Life of Loan Net Chargeoff Rate:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Current Expected Credit Loss\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"(D x C)\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"WARM\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Avg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Agg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Historical\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"User\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Future\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Current\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"In Years\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Net Chargeoffs\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Adjustment \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Result\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, lines.map(item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setYears(e, item),\n      value: item.years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, item.averageLoans, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, item.netChargeoffsSum), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, formatAsPercentage(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setUserAdjustments(e, item),\n      value: item.userAdjustments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \" \", formatAsPercentage(item.futureRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => {\n        loadLineByYearsAndFieldId(item.years, item.fieldId);\n        formatNumber();\n      },\n      onChange: e => setCurrentBalance(e, item),\n      value: item.currentBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, item.impliedResult));\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/App.js"],"names":["React","useEffect","useState","axios","App","lines","setLines","fieldId","label","years","averageLoans","netChargeoffsSum","historicalRate","userAdjustments","futureRate","currentBalance","impliedResult","loadLineByYearsAndFieldId","get","then","result","data","linesCopy","slice","item","filter","parseFloat","setYears","e","target","value","copy","itemFromLines","t","setUserAdjustments","setCurrentBalance","formatAsPercentage","toFixed","map","formatNumber"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [lines, setLines] = useState([\n    {\n      fieldId: 1,\n      label: \"Test\",\n      years: 5,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 2,\n      label: \"Test2\",\n      years: 4,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    }\n  ]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios\n      .get(\n        `https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`\n      )\n      .then(result => {\n        const { averageLoans, netChargeoffsSum } = result.data;\n\n        let linesCopy = lines.slice();\n        let item = linesCopy.filter(item => item.fieldId === fieldId);\n        item[0].averageLoans = averageLoans;\n        item[0].netChargeoffsSum = netChargeoffsSum;\n        item[0].historicalRate = netChargeoffsSum / averageLoans;\n        item[0].futureRate =\n          parseFloat(item[0].historicalRate) +\n          parseFloat(item[0].userAdjustments / 100);\n\n        item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n\n        setLines(linesCopy);\n      });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const formatAsPercentage = value => {\n    return `${(value * 100).toFixed(2)}%`;\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td colSpan=\"5\">Life of Loan Net Chargeoff Rate:</td>\n            <td></td>\n            <td colSpan=\"3\">Current Expected Credit Loss</td>\n          </tr>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td>(A)</td>\n            <td>+</td>\n            <td>(B)</td>\n            <td>=</td>\n            <td>(C)</td>\n            <td></td>\n            <td>(D)</td>\n            <td></td>\n            <td>(D x C)</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>WARM</td>\n            <td>Avg</td>\n            <td>Agg</td>\n            <td>Historical</td>\n            <td></td>\n            <td>User</td>\n            <td></td>\n            <td>Future</td>\n            <td></td>\n            <td>Current</td>\n            <td></td>\n            <td>Implied</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>In Years</td>\n            <td>Balance</td>\n            <td>Net Chargeoffs</td>\n            <td>Rate</td>\n            <td></td>\n            <td>Adjustment </td>\n            <td></td>\n            <td>Rate</td>\n            <td></td>\n            <td>Balance</td>\n            <td></td>\n            <td>Result</td>\n          </tr>\n        </thead>\n        <tbody>\n          {lines.map(item => {\n            return (\n              <tr>\n                <td>{item.label}</td>\n                <td>\n                  <input\n                    onBlur={e =>\n                      loadLineByYearsAndFieldId(item.years, item.fieldId)\n                    }\n                    onChange={e => setYears(e, item)}\n                    value={item.years}\n                  />\n                </td>\n                <td>{item.averageLoans} </td>\n                <td>{item.netChargeoffsSum}</td>\n                <td>{formatAsPercentage(item.historicalRate)}</td>\n                <td></td>\n                <td>\n                  <input\n                    onBlur={e =>\n                      loadLineByYearsAndFieldId(item.years, item.fieldId)\n                    }\n                    onChange={e => setUserAdjustments(e, item)}\n                    value={item.userAdjustments}\n                  />\n                </td>\n                <td></td>\n                <td> {formatAsPercentage(item.futureRate)}</td>\n                <td></td>\n                <td>\n                  <input\n                    onBlur={e => {\n                      loadLineByYearsAndFieldId(item.years, item.fieldId);\n                      formatNumber();\n                    }}\n                    onChange={e => setCurrentBalance(e, item)}\n                    value={item.currentBalance}\n                  />\n                </td>\n                <td></td>\n                <td>{item.impliedResult}</td>\n              </tr>\n            );\n          })}\n          {/* <tr>\n            <td>Unsecured Credit Card Loans</td>\n            <td>\n              <input value=\"5\" />\n            </td>\n            <td>$1,639,030 </td>\n            <td>$78,690 </td>\n            <td>\n              <input value=\"5\" />{\" \"}\n            </td>\n            <td>$78,690 </td>\n            <td>$78,690 </td>\n            <td>\n              <input value=\"5\" />{\" \"}\n            </td>\n            <td>$78,690 </td>\n          </tr>\n          <tr>\n            <td>New Vehicle Loans</td>\n            <td>\n              <input value=\"4\" />\n            </td>\n            <td></td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>Total Gross Loans</td>\n            <td></td>\n            <td></td>\n            <td></td>\n          </tr> */}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}