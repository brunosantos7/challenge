{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx\";\nimport React, { useState, useEffect } from \"react\";\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([{\n    label: \"Commercial Loans\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Credit Card Lines\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Total Unfunded Commitments\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }]);\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    const calculatedLines = lines.slice().map(item => {\n      const label = item.label;\n      const totalUnfundedCom = item.totalUnfundedCom;\n      const unconditionallyCancellable = item.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding = item.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = item.wtdAverageRemaining;\n      const annualExpected = item.annualExpected;\n      const expectedLifetime = parseFloat(estimatedProbabilityOfFunding) * parseInt(wtdAverageRemaining) * parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n      return {\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      };\n    });\n    setLines(calculatedLines);\n    console.log(calculatedLines);\n    console.log(lines);\n    let copy = [];\n    let linesCopy = lines.slice();\n    linesCopy.array.forEach((element, index) => {\n      const label = element.label;\n      const totalUnfundedCom = element.totalUnfundedCom;\n      const unconditionallyCancellable = element.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding = element.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = element.wtdAverageRemaining;\n      const annualExpected = element.annualExpected;\n      const expectedLifetime = parseFloat(estimatedProbabilityOfFunding) * parseInt(wtdAverageRemaining) * parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n      copy.push({\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      });\n    }); // linesCopy[0] = calculatedLines[0];\n    // linesCopy[1] = calculatedLines[1];\n    // linesCopy[2] = calculatedLines[2];\n\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom: parseInt(total.totalUnfundedCom) + parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable: parseInt(total.unconditionallyCancellable) + parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded: parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl: parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setTotalUnfundedCom(e, index);\n      },\n      value: item.totalUnfundedCom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setUnconditionallyCancellable(e, index);\n      },\n      value: item.unconditionallyCancellable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setEstimatedProbabilityOfFunding(e, index);\n      },\n      value: item.estimatedProbabilityOfFunding,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setWtdAverageRemaining(e, index);\n      },\n      value: item.wtdAverageRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues,\n      onChange: e => {\n        setAnnualExpected(e, index);\n      },\n      value: item.annualExpected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  const totalLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, item.totalUnfundedCom), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, item.unconditionallyCancellable), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      colSpan: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, item.expectedLifetime), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, item.impliedCecl));\n  };\n\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, \"Unfunded Commitments:\"), React.createElement(\"td\", {\n    colSpan: \"7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Expected Future Losses:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, \"-\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"(E)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"(F)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, \"(G)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"Unconditionally\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, \"Net\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, \"Estimated\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"Wtd. Average\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Annual\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, \"Cancellable\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, \"Probability of\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"Remaining\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, \"Lifetime\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, \"Amount (1)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, \"Funding (2)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, \"Commit. (Yrs)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, \"Loss Rate (3)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, \"Loss Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, \"CECL\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, lines.map((item, index) => {\n    if (index === lines.length - 1) {\n      return totalLine(item, index);\n    }\n\n    return simpleLine(item, index);\n  })));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx"],"names":["React","useState","useEffect","UnfundedCommitments","lines","setLines","label","totalUnfundedCom","unconditionallyCancellable","netUnfunded","estimatedProbabilityOfFunding","wtdAverageRemaining","annualExpected","expectedLifetime","impliedCecl","calculateAllValues","calculatedLines","slice","map","item","parseFloat","parseInt","console","log","copy","linesCopy","array","forEach","element","index","push","calculateTotalValues","total","reduce","currentItem","length","sum","totalUnconditionallyCancellable","totalNetUnfunded","totalImpliedCecl","filter","setTotalUnfundedCom","e","itemFromLines","target","value","setUnconditionallyCancellable","setEstimatedProbabilityOfFunding","setWtdAverageRemaining","setAnnualExpected","simpleLine","totalLine"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([\n    {\n      label: \"Commercial Loans\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Credit Card Lines\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Total Unfunded Commitments\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    }\n  ]);\n\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    const calculatedLines = lines.slice().map(item => {\n      const label = item.label;\n      const totalUnfundedCom = item.totalUnfundedCom;\n      const unconditionallyCancellable = item.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding = item.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = item.wtdAverageRemaining;\n      const annualExpected = item.annualExpected;\n      const expectedLifetime =\n        parseFloat(estimatedProbabilityOfFunding) *\n        parseInt(wtdAverageRemaining) *\n        parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n\n      return {\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      };\n    });\n\n    setLines(calculatedLines);\n    console.log(calculatedLines);\n    console.log(lines);\n\n    let copy = [];\n\n    let linesCopy = lines.slice();\n    linesCopy.array.forEach((element, index) => {\n      const label = element.label;\n      const totalUnfundedCom = element.totalUnfundedCom;\n      const unconditionallyCancellable = element.unconditionallyCancellable;\n      const netUnfunded = totalUnfundedCom - unconditionallyCancellable;\n      const estimatedProbabilityOfFunding =\n        element.estimatedProbabilityOfFunding;\n      const wtdAverageRemaining = element.wtdAverageRemaining;\n      const annualExpected = element.annualExpected;\n      const expectedLifetime =\n        parseFloat(estimatedProbabilityOfFunding) *\n        parseInt(wtdAverageRemaining) *\n        parseFloat(annualExpected);\n      const impliedCecl = expectedLifetime * netUnfunded;\n\n      copy.push({\n        label,\n        totalUnfundedCom,\n        unconditionallyCancellable,\n        netUnfunded,\n        estimatedProbabilityOfFunding,\n        wtdAverageRemaining,\n        annualExpected,\n        expectedLifetime,\n        impliedCecl\n      });\n    });\n\n    // linesCopy[0] = calculatedLines[0];\n    // linesCopy[1] = calculatedLines[1];\n    // linesCopy[2] = calculatedLines[2];\n\n    calculateTotalValues();\n  };\n\n  const calculateTotalValues = () => {\n    const total = lines.slice().reduce((total, currentItem, index) => {\n      if (index !== lines.length - 1) {\n        const sum = {\n          totalUnfundedCom:\n            parseInt(total.totalUnfundedCom) +\n            parseInt(currentItem.totalUnfundedCom),\n          totalUnconditionallyCancellable:\n            parseInt(total.unconditionallyCancellable) +\n            parseInt(currentItem.unconditionallyCancellable),\n          totalNetUnfunded:\n            parseInt(total.netUnfunded) + parseInt(currentItem.netUnfunded),\n          totalImpliedCecl:\n            parseFloat(total.impliedCecl) + parseFloat(currentItem.impliedCecl)\n        };\n\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter((item, index) => index === lines.length - 1)[0];\n\n    item.totalUnfundedCom = total.totalUnfundedCom;\n    item.unconditionallyCancellable = total.totalUnconditionallyCancellable;\n    item.netUnfunded = total.totalNetUnfunded;\n    item.impliedCecl = total.totalImpliedCecl;\n    item.expectedLifetime = item.impliedCecl / item.netUnfunded;\n\n    setLines(linesCopy);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const setEstimatedProbabilityOfFunding = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.estimatedProbabilityOfFunding = e.target.value;\n    setLines(copy);\n  };\n\n  const setWtdAverageRemaining = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.wtdAverageRemaining = e.target.value;\n    setLines(copy);\n  };\n\n  const setAnnualExpected = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.annualExpected = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setTotalUnfundedCom(e, index);\n            }}\n            value={item.totalUnfundedCom}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setUnconditionallyCancellable(e, index);\n            }}\n            value={item.unconditionallyCancellable}\n          />\n        </td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setEstimatedProbabilityOfFunding(e, index);\n            }}\n            value={item.estimatedProbabilityOfFunding}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setWtdAverageRemaining(e, index);\n            }}\n            value={item.wtdAverageRemaining}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={calculateAllValues}\n            onChange={e => {\n              setAnnualExpected(e, index);\n            }}\n            value={item.annualExpected}\n          />\n        </td>\n        <td></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  const totalLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>{item.totalUnfundedCom}</td>\n        <td></td>\n        <td>{item.unconditionallyCancellable}</td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td colSpan=\"6\"></td>\n        <td>{item.expectedLifetime}</td>\n        <td></td>\n        <td>{item.impliedCecl}</td>\n      </tr>\n    );\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td></td>\n          <td colSpan=\"5\">Unfunded Commitments:</td>\n          <td colSpan=\"7\">Expected Future Losses:</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>(A)</td>\n          <td>-</td>\n          <td>(B)</td>\n          <td>=</td>\n          <td>(C)</td>\n          <td>(D)</td>\n          <td>x</td>\n          <td>(E)</td>\n          <td>x</td>\n          <td>(F)</td>\n          <td>=</td>\n          <td>(G)</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Total</td>\n          <td></td>\n          <td>Unconditionally</td>\n          <td></td>\n          <td>Net</td>\n          <td>Estimated</td>\n          <td></td>\n          <td>Wtd. Average</td>\n          <td></td>\n          <td>Annual</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Unfunded</td>\n          <td></td>\n          <td>Cancellable</td>\n          <td></td>\n          <td>Unfunded</td>\n          <td>Probability of</td>\n          <td></td>\n          <td>Remaining</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td>Lifetime</td>\n          <td></td>\n          <td>Implied</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Commitment</td>\n          <td></td>\n          <td>Amount (1)</td>\n          <td></td>\n          <td>Commitment</td>\n          <td>Funding (2)</td>\n          <td></td>\n          <td>Commit. (Yrs)</td>\n          <td></td>\n          <td>Loss Rate (3)</td>\n          <td></td>\n          <td>Loss Rate</td>\n          <td></td>\n          <td>CECL</td>\n        </tr>\n      </thead>\n      <tbody>\n        {lines.map((item, index) => {\n          if (index === lines.length - 1) {\n            return totalLine(item, index);\n          }\n          return simpleLine(item, index);\n        })}\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}