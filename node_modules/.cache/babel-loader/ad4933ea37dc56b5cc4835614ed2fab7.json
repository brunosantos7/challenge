{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx\";\nimport React from \"react\"; // import { Container } from './styles';\n\nexport default function SummaryResults() {\n  const [lines, setLines] = useState([{\n    fieldId: 1,\n    label: \"Unsecured Credit Card Loans\",\n    years: 5,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 2,\n    label: \"New Vehicle Loans\",\n    years: 4,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios.get(`https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`).then(result => {\n      const {\n        averageLoans,\n        netChargeoffsSum\n      } = result.data;\n      let linesCopy = lines.slice();\n      let item = linesCopy.filter(item => item.fieldId === fieldId);\n      item[0].averageLoans = averageLoans;\n      item[0].netChargeoffsSum = netChargeoffsSum;\n      item[0].historicalRate = netChargeoffsSum / averageLoans;\n      item[0].futureRate = parseFloat(item[0].historicalRate) + parseFloat(item[0].userAdjustments / 100);\n      item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n      setLines(linesCopy);\n    });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Life of Loan Net Chargeoff Rate:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Current Expected Credit Loss\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"(D x C)\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"WARM\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Avg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Agg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Historical\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"User\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Future\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Current\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"In Years\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Net Chargeoffs\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Adjustment \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Result\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, lines.map(item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldIdCb(item.years, item.fieldId),\n      onChange: e => setYearsCb(e, item),\n      value: item.years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, item.averageLoans, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, item.netChargeoffsSum), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, formatAsPercentage(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldIdCb(item.years, item.fieldId),\n      onChange: e => setUserAdjustmentsCb(e, item),\n      value: item.userAdjustments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \" \", formatAsPercentageCb(item.futureRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => {\n        loadLineByYearsAndFieldIdCb(item.years, item.fieldId);\n      },\n      onChange: e => setCurrentBalanceCb(e, item),\n      value: item.currentBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.impliedResult)));\n  }))));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx"],"names":["React","SummaryResults","lines","setLines","useState","fieldId","label","years","averageLoans","netChargeoffsSum","historicalRate","userAdjustments","futureRate","currentBalance","impliedResult","loadLineByYearsAndFieldId","axios","get","then","result","data","linesCopy","slice","item","filter","parseFloat","useEffect","setYears","e","target","value","copy","itemFromLines","t","setUserAdjustments","setCurrentBalance","map","loadLineByYearsAndFieldIdCb","setYearsCb","formatAsPercentage","setUserAdjustmentsCb","formatAsPercentageCb","setCurrentBalanceCb","formatAsDolarNumberCb"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// import { Container } from './styles';\n\nexport default function SummaryResults() {\n  const [lines, setLines] = useState([\n    {\n      fieldId: 1,\n      label: \"Unsecured Credit Card Loans\",\n      years: 5,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 2,\n      label: \"New Vehicle Loans\",\n      years: 4,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    }\n  ]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios\n      .get(\n        `https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`\n      )\n      .then(result => {\n        const { averageLoans, netChargeoffsSum } = result.data;\n\n        let linesCopy = lines.slice();\n        let item = linesCopy.filter(item => item.fieldId === fieldId);\n        item[0].averageLoans = averageLoans;\n        item[0].netChargeoffsSum = netChargeoffsSum;\n        item[0].historicalRate = netChargeoffsSum / averageLoans;\n        item[0].futureRate =\n          parseFloat(item[0].historicalRate) +\n          parseFloat(item[0].userAdjustments / 100);\n\n        item[0].impliedResult = item[0].futureRate * item[0].currentBalance;\n\n        setLines(linesCopy);\n      });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n  }, []);\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td colSpan=\"5\">Life of Loan Net Chargeoff Rate:</td>\n            <td></td>\n            <td colSpan=\"3\">Current Expected Credit Loss</td>\n          </tr>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td>(A)</td>\n            <td>+</td>\n            <td>(B)</td>\n            <td>=</td>\n            <td>(C)</td>\n            <td></td>\n            <td>(D)</td>\n            <td></td>\n            <td>(D x C)</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>WARM</td>\n            <td>Avg</td>\n            <td>Agg</td>\n            <td>Historical</td>\n            <td></td>\n            <td>User</td>\n            <td></td>\n            <td>Future</td>\n            <td></td>\n            <td>Current</td>\n            <td></td>\n            <td>Implied</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>In Years</td>\n            <td>Balance</td>\n            <td>Net Chargeoffs</td>\n            <td>Rate</td>\n            <td></td>\n            <td>Adjustment </td>\n            <td></td>\n            <td>Rate</td>\n            <td></td>\n            <td>Balance</td>\n            <td></td>\n            <td>Result</td>\n          </tr>\n        </thead>\n        <tbody>\n          {lines.map(item => {\n            return (\n              <tr>\n                <td>{item.label}</td>\n                <td>\n                  <input\n                    onBlur={e =>\n                      loadLineByYearsAndFieldIdCb(item.years, item.fieldId)\n                    }\n                    onChange={e => setYearsCb(e, item)}\n                    value={item.years}\n                  />\n                </td>\n                <td>{item.averageLoans} </td>\n                <td>{item.netChargeoffsSum}</td>\n                <td>{formatAsPercentage(item.historicalRate)}</td>\n                <td></td>\n                <td>\n                  <input\n                    onBlur={e =>\n                      loadLineByYearsAndFieldIdCb(item.years, item.fieldId)\n                    }\n                    onChange={e => setUserAdjustmentsCb(e, item)}\n                    value={item.userAdjustments}\n                  />\n                </td>\n                <td></td>\n                <td> {formatAsPercentageCb(item.futureRate)}</td>\n                <td></td>\n                <td>\n                  <input\n                    onBlur={e => {\n                      loadLineByYearsAndFieldIdCb(item.years, item.fieldId);\n                    }}\n                    onChange={e => setCurrentBalanceCb(e, item)}\n                    value={item.currentBalance}\n                  />\n                </td>\n                <td></td>\n                <td>{formatAsDolarNumberCb(item.impliedResult)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}