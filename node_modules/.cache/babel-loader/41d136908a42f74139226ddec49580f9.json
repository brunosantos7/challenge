{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nexport default function SummaryResults({\n  formatAsPercentageCb,\n  formatAsDolarNumberCb,\n  ceclValue,\n  showSummary\n}) {\n  const [totalCecl, setTotalCecl] = useState(0);\n  const [bankAllValue, setBankAllValue] = useState(0);\n  const [bankAllValueToCurrentBalanceTotal, setBankAllValueToCurrentBalanceTotal] = useState(0);\n  const [lines, setLines] = useState([{\n    fieldId: 1,\n    label: \"Unsecured Credit Card Loans\",\n    years: 5,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 2,\n    label: \"New Vehicle Loans\",\n    years: 4,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 999,\n    label: \"Total Gross Loans\",\n    years: 0,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios.get(`https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`).then(result => {\n      const {\n        averageLoans,\n        netChargeoffsSum\n      } = result.data;\n      let linesCopy = lines.slice();\n      let item = linesCopy.filter(item => item.fieldId === fieldId)[0];\n      item.averageLoans = averageLoans;\n      item.netChargeoffsSum = netChargeoffsSum;\n      item.historicalRate = netChargeoffsSum / averageLoans;\n      item.futureRate = parseFloat(item.historicalRate) + parseFloat(item.userAdjustments / 100);\n      item.impliedResult = item.futureRate * item.currentBalance;\n      setLines(linesCopy);\n      calculeTotal();\n    });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const calculeTotal = () => {\n    const totalLine = lines.reduce((total, currentItem) => {\n      if (currentItem.fieldId !== 999) {\n        const sum = {\n          averageLoans: total.averageLoans + currentItem.averageLoans,\n          netChargeoffsSum: total.netChargeoffsSum + currentItem.netChargeoffsSum,\n          currentBalance: parseFloat(total.currentBalance) + parseFloat(currentItem.currentBalance),\n          impliedResult: total.impliedResult + currentItem.impliedResult\n        };\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter(item => item.fieldId === 999)[0];\n    item.averageLoans = totalLine.averageLoans;\n    item.netChargeoffsSum = totalLine.netChargeoffsSum;\n    item.currentBalance = totalLine.currentBalance;\n    item.historicalRate = totalLine.netChargeoffsSum / totalLine.averageLoans;\n    item.impliedResult = totalLine.impliedResult;\n    item.years = getYearsTotal().yearsTotal;\n    item.userAdjustments = getYearsTotal().userAdjustmentsTotal;\n    item.futureRate = getYearsTotal().futureRateTotal;\n    setLines(linesCopy);\n    calculeBankAllValueToCurrentBalanceTotal();\n  };\n\n  const getYearsTotal = () => {\n    let value = lines.map(line => {\n      if (line.fieldId !== 999) {\n        const totalIndex = lines.length - 1;\n        return {\n          years: line.years * (line.averageLoans / lines[totalIndex].averageLoans),\n          userAdjustments: line.userAdjustments * (line.currentBalance / lines[totalIndex].currentBalance),\n          futureRate: line.futureRate * (line.currentBalance / lines[totalIndex].currentBalance)\n        };\n      }\n    });\n    return value.reduce((totalValues, currentItem) => {\n      if (currentItem !== undefined) {\n        return {\n          yearsTotal: totalValues.years + currentItem.years,\n          userAdjustmentsTotal: totalValues.userAdjustments + currentItem.userAdjustments,\n          futureRateTotal: totalValues.futureRate + currentItem.futureRate\n        };\n      }\n\n      return totalValues;\n    });\n  };\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const isNegative = value => {\n    console.log(value);\n    console.log(ceclValue);\n    return value < 0;\n  };\n\n  const calculeBankAllValueToCurrentBalanceTotal = () => {\n    const result = bankAllValue / lines[lines.length - 1].currentBalance ? bankAllValue / lines[lines.length - 1].currentBalance : 0;\n    setBankAllValueToCurrentBalanceTotal(formatAsPercentageCb(result, 2));\n  };\n\n  const simpleTableLine = item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setYears(e, item),\n      value: item.years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.averageLoans, 0), \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.netChargeoffsSum, 0)), React.createElement(\"td\", {\n      className: \"border-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, formatAsPercentageCb(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: () => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setUserAdjustments(e, item),\n      value: item.userAdjustments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \" \", formatAsPercentageCb(item.futureRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => {\n        loadLineByYearsAndFieldId(item.years, item.fieldId);\n      },\n      onChange: e => setCurrentBalance(e, item),\n      value: item.currentBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.impliedResult)));\n  };\n\n  const totalTableLine = item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, item.years.toFixed(2)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, item.averageLoans, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, item.netChargeoffsSum), React.createElement(\"td\", {\n      className: \"border-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, formatAsPercentageCb(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, item.userAdjustments ? item.userAdjustments.toFixed(2) : 0, \"%\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \" \", formatAsPercentageCb(item.futureRate ? item.futureRate : 0)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, item.currentBalance), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.impliedResult)));\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      display: showSummary ? \"\" : \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    border: \"0\",\n    cellspacing: \"0\",\n    cellpadding: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    className: \"table-head\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    class: \"blue-header underline-header border-left\",\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \"Life of Loan Net Chargeoff Rate:\"), React.createElement(\"td\", {\n    style: {\n      background: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    class: \"blue-header underline-header  border-left\",\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Current Expected Credit Loss\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      fontStyle: \"italic\"\n    },\n    className: \"border-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"td\", {\n    style: {\n      fontStyle: \"italic\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    style: {\n      fontStyle: \"italic\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    style: {\n      background: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      fontStyle: \"italic\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      fontStyle: \"italic\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, \"(D x C)\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, \"WARM\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Avg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Agg\"), React.createElement(\"td\", {\n    className: \"border-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \"Historical\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \"User\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, \"Future\"), React.createElement(\"td\", {\n    style: {\n      background: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"Current\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, \"In Years\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, \"Net Chargeoffs\"), React.createElement(\"td\", {\n    className: \"border-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, \"Adjustment \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    style: {\n      background: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"Result\"))), React.createElement(\"tbody\", {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, lines.map(item => {\n    if (item.fieldId !== 999) {\n      return simpleTableLine(item);\n    }\n\n    return totalTableLine(item);\n  }), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, bankAllValueToCurrentBalanceTotal), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, \"Bank ALL\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onBlur: e => {\n      calculeBankAllValueToCurrentBalanceTotal();\n      setTotalCecl(formatAsDolarNumberCb(bankAllValue - lines[lines.length - 1].impliedResult + ceclValue));\n    },\n    onChange: e => setBankAllValue(e.target.value),\n    value: bankAllValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    colSpan: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, \"CECL \", isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\", \" for Unfunded\"), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }, ceclValue)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    colSpan: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377\n    },\n    __self: this\n  }, \"Total CECL \", isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\"), React.createElement(\"td\", {\n    style: {\n      background: isNegative(ceclValue) ? \"red\" : \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }, totalCecl)))));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx"],"names":["React","useEffect","useState","axios","SummaryResults","formatAsPercentageCb","formatAsDolarNumberCb","ceclValue","showSummary","totalCecl","setTotalCecl","bankAllValue","setBankAllValue","bankAllValueToCurrentBalanceTotal","setBankAllValueToCurrentBalanceTotal","lines","setLines","fieldId","label","years","averageLoans","netChargeoffsSum","historicalRate","userAdjustments","futureRate","currentBalance","impliedResult","loadLineByYearsAndFieldId","get","then","result","data","linesCopy","slice","item","filter","parseFloat","calculeTotal","totalLine","reduce","total","currentItem","sum","getYearsTotal","yearsTotal","userAdjustmentsTotal","futureRateTotal","calculeBankAllValueToCurrentBalanceTotal","value","map","line","totalIndex","length","totalValues","undefined","setYears","e","target","copy","itemFromLines","t","setUserAdjustments","setCurrentBalance","isNegative","console","log","simpleTableLine","totalTableLine","toFixed","display","background","fontStyle"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function SummaryResults({\n  formatAsPercentageCb,\n  formatAsDolarNumberCb,\n  ceclValue,\n  showSummary\n}) {\n  const [totalCecl, setTotalCecl] = useState(0);\n  const [bankAllValue, setBankAllValue] = useState(0);\n  const [\n    bankAllValueToCurrentBalanceTotal,\n    setBankAllValueToCurrentBalanceTotal\n  ] = useState(0);\n\n  const [lines, setLines] = useState([\n    {\n      fieldId: 1,\n      label: \"Unsecured Credit Card Loans\",\n      years: 5,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 2,\n      label: \"New Vehicle Loans\",\n      years: 4,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 999,\n      label: \"Total Gross Loans\",\n      years: 0,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    }\n  ]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios\n      .get(\n        `https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`\n      )\n      .then(result => {\n        const { averageLoans, netChargeoffsSum } = result.data;\n\n        let linesCopy = lines.slice();\n        let item = linesCopy.filter(item => item.fieldId === fieldId)[0];\n        item.averageLoans = averageLoans;\n        item.netChargeoffsSum = netChargeoffsSum;\n        item.historicalRate = netChargeoffsSum / averageLoans;\n\n        item.futureRate =\n          parseFloat(item.historicalRate) +\n          parseFloat(item.userAdjustments / 100);\n\n        item.impliedResult = item.futureRate * item.currentBalance;\n\n        setLines(linesCopy);\n\n        calculeTotal();\n      });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const calculeTotal = () => {\n    const totalLine = lines.reduce((total, currentItem) => {\n      if (currentItem.fieldId !== 999) {\n        const sum = {\n          averageLoans: total.averageLoans + currentItem.averageLoans,\n          netChargeoffsSum:\n            total.netChargeoffsSum + currentItem.netChargeoffsSum,\n\n          currentBalance:\n            parseFloat(total.currentBalance) +\n            parseFloat(currentItem.currentBalance),\n\n          impliedResult: total.impliedResult + currentItem.impliedResult\n        };\n        return sum;\n      }\n\n      return total;\n    });\n\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter(item => item.fieldId === 999)[0];\n\n    item.averageLoans = totalLine.averageLoans;\n    item.netChargeoffsSum = totalLine.netChargeoffsSum;\n    item.currentBalance = totalLine.currentBalance;\n    item.historicalRate = totalLine.netChargeoffsSum / totalLine.averageLoans;\n    item.impliedResult = totalLine.impliedResult;\n\n    item.years = getYearsTotal().yearsTotal;\n    item.userAdjustments = getYearsTotal().userAdjustmentsTotal;\n    item.futureRate = getYearsTotal().futureRateTotal;\n\n    setLines(linesCopy);\n    calculeBankAllValueToCurrentBalanceTotal();\n  };\n\n  const getYearsTotal = () => {\n    let value = lines.map(line => {\n      if (line.fieldId !== 999) {\n        const totalIndex = lines.length - 1;\n\n        return {\n          years:\n            line.years * (line.averageLoans / lines[totalIndex].averageLoans),\n          userAdjustments:\n            line.userAdjustments *\n            (line.currentBalance / lines[totalIndex].currentBalance),\n          futureRate:\n            line.futureRate *\n            (line.currentBalance / lines[totalIndex].currentBalance)\n        };\n      }\n    });\n\n    return value.reduce((totalValues, currentItem) => {\n      if (currentItem !== undefined) {\n        return {\n          yearsTotal: totalValues.years + currentItem.years,\n          userAdjustmentsTotal:\n            totalValues.userAdjustments + currentItem.userAdjustments,\n          futureRateTotal: totalValues.futureRate + currentItem.futureRate\n        };\n      }\n\n      return totalValues;\n    });\n  };\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const isNegative = value => {\n    console.log(value);\n    console.log(ceclValue);\n    return value < 0;\n  };\n\n  const calculeBankAllValueToCurrentBalanceTotal = () => {\n    const result =\n      bankAllValue / lines[lines.length - 1].currentBalance\n        ? bankAllValue / lines[lines.length - 1].currentBalance\n        : 0;\n\n    setBankAllValueToCurrentBalanceTotal(formatAsPercentageCb(result, 2));\n  };\n\n  const simpleTableLine = item => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={e => loadLineByYearsAndFieldId(item.years, item.fieldId)}\n            onChange={e => setYears(e, item)}\n            value={item.years}\n          />\n        </td>\n        <td>{formatAsDolarNumberCb(item.averageLoans, 0)} </td>\n        <td>{formatAsDolarNumberCb(item.netChargeoffsSum, 0)}</td>\n        <td className=\"border-left\">\n          {formatAsPercentageCb(item.historicalRate)}\n        </td>\n        <td></td>\n        <td>\n          <input\n            onBlur={() => loadLineByYearsAndFieldId(item.years, item.fieldId)}\n            onChange={e => setUserAdjustments(e, item)}\n            value={item.userAdjustments}\n          />\n        </td>\n        <td></td>\n        <td> {formatAsPercentageCb(item.futureRate)}</td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => {\n              loadLineByYearsAndFieldId(item.years, item.fieldId);\n            }}\n            onChange={e => setCurrentBalance(e, item)}\n            value={item.currentBalance}\n          />\n        </td>\n        <td></td>\n        <td>{formatAsDolarNumberCb(item.impliedResult)}</td>\n      </tr>\n    );\n  };\n\n  const totalTableLine = item => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>{item.years.toFixed(2)}</td>\n        <td>{item.averageLoans} </td>\n        <td>{item.netChargeoffsSum}</td>\n        <td className=\"border-left\">\n          {formatAsPercentageCb(item.historicalRate)}\n        </td>\n        <td></td>\n        <td>{item.userAdjustments ? item.userAdjustments.toFixed(2) : 0}%</td>\n        <td></td>\n        <td> {formatAsPercentageCb(item.futureRate ? item.futureRate : 0)}</td>\n        <td></td>\n        <td>{item.currentBalance}</td>\n        <td></td>\n        <td>{formatAsDolarNumberCb(item.impliedResult)}</td>\n      </tr>\n    );\n  };\n\n  return (\n    <div style={{ display: showSummary ? \"\" : \"none\" }}>\n      <table border=\"0\" cellspacing=\"0\" cellpadding=\"4\">\n        <thead className=\"table-head\">\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td class=\"blue-header underline-header border-left\" colSpan=\"5\">\n              Life of Loan Net Chargeoff Rate:\n            </td>\n            <td style={{ background: \"white\" }}></td>\n            <td class=\"blue-header underline-header  border-left\" colSpan=\"3\">\n              Current Expected Credit Loss\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td style={{ fontStyle: \"italic\" }} className=\"border-left\">\n              (A)\n            </td>\n            <td>+</td>\n            <td style={{ fontStyle: \"italic\" }}>(B)</td>\n            <td>=</td>\n            <td style={{ fontStyle: \"italic\" }}>(C)</td>\n            <td style={{ background: \"white\" }}></td>\n            <td style={{ fontStyle: \"italic\" }}>(D)</td>\n            <td></td>\n            <td style={{ fontStyle: \"italic\" }}>(D x C)</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>WARM</td>\n            <td>Avg</td>\n            <td>Agg</td>\n            <td className=\"border-left\">Historical</td>\n            <td></td>\n            <td>User</td>\n            <td></td>\n            <td>Future</td>\n            <td style={{ background: \"white\" }}></td>\n            <td>Current</td>\n            <td></td>\n            <td>Implied</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>In Years</td>\n            <td>Balance</td>\n            <td>Net Chargeoffs</td>\n            <td className=\"border-left\">Rate</td>\n            <td></td>\n            <td>Adjustment </td>\n            <td></td>\n            <td>Rate</td>\n            <td style={{ background: \"white\" }}></td>\n            <td>Balance</td>\n            <td></td>\n            <td>Result</td>\n          </tr>\n        </thead>\n        <tbody align=\"right\">\n          {lines.map(item => {\n            if (item.fieldId !== 999) {\n              return simpleTableLine(item);\n            }\n            return totalTableLine(item);\n          })}\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td style={{ background: \"lightblue\" }} colSpan=\"4\"></td>\n            <td style={{ background: \"lightblue\" }}>\n              {bankAllValueToCurrentBalanceTotal}\n            </td>\n            <td style={{ background: \"lightblue\" }} colSpan=\"3\">\n              Bank ALL\n            </td>\n            <td>\n              <input\n                onBlur={e => {\n                  calculeBankAllValueToCurrentBalanceTotal();\n\n                  setTotalCecl(\n                    formatAsDolarNumberCb(\n                      bankAllValue -\n                        lines[lines.length - 1].impliedResult +\n                        ceclValue\n                    )\n                  );\n                }}\n                onChange={e => setBankAllValue(e.target.value)}\n                value={bankAllValue}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"9\"></td>\n            <td\n              style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}\n            ></td>\n            <td\n              style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}\n              colSpan=\"2\"\n            >\n              CECL {isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\"} for\n              Unfunded\n            </td>\n            <td style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}>\n              {ceclValue}\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"9\"></td>\n            <td\n              style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}\n            ></td>\n            <td\n              style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}\n              colSpan=\"2\"\n            >\n              Total CECL {isNegative(ceclValue) ? \"ShortFall\" : \"Surplus\"}\n            </td>\n            <td style={{ background: isNegative(ceclValue) ? \"red\" : \"green\" }}>\n              {totalCecl}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}