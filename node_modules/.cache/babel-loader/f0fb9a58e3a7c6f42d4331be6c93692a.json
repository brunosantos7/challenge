{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx\";\nimport React, { useState, useEffect } from \"react\";\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([{\n    label: \"Commercial Loans\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Credit Card Lines\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }, {\n    label: \"Total Unfunded Commitments\",\n    totalUnfundedCom: 0,\n    unconditionallyCancellable: 0,\n    netUnfunded: 0,\n    estimatedProbabilityOfFunding: 0,\n    wtdAverageRemaining: 0,\n    annualExpected: 0,\n    expectedLifetime: 0,\n    impliedCecl: 0\n  }]);\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    let calculatedLines = lines.map(item => {\n      return {\n        label: item.label,\n        totalUnfundedCom: item.totalUnfundedCom,\n        unconditionallyCancellable: item.unconditionallyCancellable,\n        netUnfunded: item.totalUnfundedCom - item.unconditionallyCancellable,\n        estimatedProbabilityOfFunding: item.estimatedProbabilityOfFunding,\n        wtdAverageRemaining: item.wtdAverageRemaining,\n        annualExpected: item.annualExpected,\n        expectedLifetime: item.estimatedProbabilityOfFunding + item.wtdAverageRemaining + item.annualExpected,\n        impliedCecl: item.expectedLifetime * item.netUnfunded\n      };\n    });\n    setLines(calculatedLines);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: calculateAllValues(),\n      onChange: e => {\n        setTotalUnfundedCom(e, index);\n      },\n      value: item.totalUnfundedCom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: e => {\n        setUnconditionallyCancellable(e, index);\n      },\n      value: item.unconditionallyCancellable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, item.netUnfunded), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: item.estimatedProbabilityOfFunding,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: item.wtdAverageRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: item.annualExpected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"123123\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"123123\"));\n  };\n\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Unfunded Commitments:\"), React.createElement(\"td\", {\n    colSpan: \"7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Expected Future Losses:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"-\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"(E)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"x\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"(F)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"(G)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Unconditionally\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Net\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Estimated\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Wtd. Average\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Annual\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  })), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Cancellable\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Unfunded\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Probability of\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"Remaining\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Expected\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Lifetime\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Amount (1)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Commitment\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Funding (2)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Commit. (Yrs)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Loss Rate (3)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Loss Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"CECL\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, lines.map((item, index) => {\n    if (index === lines.length - 1) {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      });\n    }\n\n    return simpleLine(item, index);\n  })));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/UnfundedCommitments.jsx"],"names":["React","useState","useEffect","UnfundedCommitments","lines","setLines","label","totalUnfundedCom","unconditionallyCancellable","netUnfunded","estimatedProbabilityOfFunding","wtdAverageRemaining","annualExpected","expectedLifetime","impliedCecl","calculateAllValues","calculatedLines","map","item","setTotalUnfundedCom","e","index","copy","slice","itemFromLines","target","value","setUnconditionallyCancellable","simpleLine","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function UnfundedCommitments() {\n  const [lines, setLines] = useState([\n    {\n      label: \"Commercial Loans\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Credit Card Lines\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    },\n    {\n      label: \"Total Unfunded Commitments\",\n      totalUnfundedCom: 0,\n      unconditionallyCancellable: 0,\n      netUnfunded: 0,\n      estimatedProbabilityOfFunding: 0,\n      wtdAverageRemaining: 0,\n      annualExpected: 0,\n      expectedLifetime: 0,\n      impliedCecl: 0\n    }\n  ]);\n\n  useEffect(() => {\n    calculateAllValues();\n  }, []);\n\n  const calculateAllValues = () => {\n    let calculatedLines = lines.map(item => {\n      return {\n        label: item.label,\n        totalUnfundedCom: item.totalUnfundedCom,\n        unconditionallyCancellable: item.unconditionallyCancellable,\n        netUnfunded: item.totalUnfundedCom - item.unconditionallyCancellable,\n        estimatedProbabilityOfFunding: item.estimatedProbabilityOfFunding,\n        wtdAverageRemaining: item.wtdAverageRemaining,\n        annualExpected: item.annualExpected,\n        expectedLifetime:\n          item.estimatedProbabilityOfFunding +\n          item.wtdAverageRemaining +\n          item.annualExpected,\n        impliedCecl: item.expectedLifetime * item.netUnfunded\n      };\n    });\n\n    setLines(calculatedLines);\n  };\n\n  const setTotalUnfundedCom = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.totalUnfundedCom = e.target.value;\n    setLines(copy);\n  };\n\n  const setUnconditionallyCancellable = (e, index) => {\n    let copy = lines.slice();\n    let itemFromLines = copy[index];\n\n    itemFromLines.unconditionallyCancellable = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleLine = (item, index) => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={calculateAllValues()}\n            onChange={e => {\n              setTotalUnfundedCom(e, index);\n            }}\n            value={item.totalUnfundedCom}\n          />\n        </td>\n        <td></td>\n        <td>\n          <input\n            onChange={e => {\n              setUnconditionallyCancellable(e, index);\n            }}\n            value={item.unconditionallyCancellable}\n          />\n        </td>\n        <td></td>\n        <td>{item.netUnfunded}</td>\n        <td>\n          <input value={item.estimatedProbabilityOfFunding} />\n        </td>\n        <td></td>\n        <td>\n          <input value={item.wtdAverageRemaining} />\n        </td>\n        <td></td>\n        <td>\n          <input value={item.annualExpected} />\n        </td>\n        <td></td>\n        <td>123123</td>\n        <td></td>\n        <td>123123</td>\n      </tr>\n    );\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td></td>\n          <td colSpan=\"5\">Unfunded Commitments:</td>\n          <td colSpan=\"7\">Expected Future Losses:</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>(A)</td>\n          <td>-</td>\n          <td>(B)</td>\n          <td>=</td>\n          <td>(C)</td>\n          <td>(D)</td>\n          <td>x</td>\n          <td>(E)</td>\n          <td>x</td>\n          <td>(F)</td>\n          <td>=</td>\n          <td>(G)</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Total</td>\n          <td></td>\n          <td>Unconditionally</td>\n          <td></td>\n          <td>Net</td>\n          <td>Estimated</td>\n          <td></td>\n          <td>Wtd. Average</td>\n          <td></td>\n          <td>Annual</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Unfunded</td>\n          <td></td>\n          <td>Cancellable</td>\n          <td></td>\n          <td>Unfunded</td>\n          <td>Probability of</td>\n          <td></td>\n          <td>Remaining</td>\n          <td></td>\n          <td>Expected</td>\n          <td></td>\n          <td>Lifetime</td>\n          <td></td>\n          <td>Implied</td>\n        </tr>\n        <tr>\n          <td></td>\n          <td>Commitment</td>\n          <td></td>\n          <td>Amount (1)</td>\n          <td></td>\n          <td>Commitment</td>\n          <td>Funding (2)</td>\n          <td></td>\n          <td>Commit. (Yrs)</td>\n          <td></td>\n          <td>Loss Rate (3)</td>\n          <td></td>\n          <td>Loss Rate</td>\n          <td></td>\n          <td>CECL</td>\n        </tr>\n      </thead>\n      <tbody>\n        {lines.map((item, index) => {\n          if (index === lines.length - 1) {\n            return <tr></tr>;\n          }\n          return simpleLine(item, index);\n        })}\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}