{"ast":null,"code":"var _jsxFileName = \"/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nexport default function SummaryResults({\n  formatAsPercentageCb,\n  formatAsDolarNumberCb\n}) {\n  const [lines, setLines] = useState([{\n    fieldId: 1,\n    label: \"Unsecured Credit Card Loans\",\n    years: 5,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 2,\n    label: \"New Vehicle Loans\",\n    years: 4,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }, {\n    fieldId: 999,\n    label: \"Total Gross Loans\",\n    years: 0,\n    averageLoans: 0,\n    netChargeoffsSum: 0,\n    historicalRate: 0,\n    userAdjustments: 0,\n    futureRate: 0,\n    currentBalance: 0,\n    impliedResult: 0\n  }]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios.get(`https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`).then(result => {\n      const {\n        averageLoans,\n        netChargeoffsSum\n      } = result.data;\n      let linesCopy = lines.slice();\n      let item = linesCopy.filter(item => item.fieldId === fieldId)[0];\n      item.averageLoans = averageLoans;\n      item.netChargeoffsSum = netChargeoffsSum;\n      item.historicalRate = netChargeoffsSum / averageLoans;\n      item.futureRate = parseFloat(item.historicalRate) + parseFloat(item.userAdjustments / 100);\n      item.impliedResult = item.futureRate * item.currentBalance;\n      setLines(linesCopy);\n      calculeTotal();\n    });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const calculeTotal = () => {\n    const totalLine = lines.reduce((total, currentItem) => {\n      if (currentItem.fieldId !== 999) {\n        const sum = {\n          averageLoans: total.averageLoans + currentItem.averageLoans,\n          netChargeoffsSum: total.netChargeoffsSum + currentItem.netChargeoffsSum,\n          historicalRate: total.historicalRate + currentItem.historicalRate\n        };\n        return sum;\n      }\n\n      return total;\n    });\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter(item => item.fieldId === 999)[0];\n    item.averageLoans = totalLine.averageLoans;\n    setLines(linesCopy);\n    console.log(\"TOTAL LIEN\");\n    console.log(item);\n    item.years = getYearsTotal();\n  };\n\n  const getYearsTotal = () => {\n    let value = lines.map(line => {\n      const totalIndex = lines.length - 1;\n      console.log(\"years\");\n      console.log(line.years);\n      console.log(\"yavgears\");\n      console.log(line.averageLoans);\n      console.log(\"total\");\n      console.log(totalIndex);\n      console.log(\"item\");\n      console.log(lines[totalIndex]);\n      return line.years * (line.averageLoans / lines[totalIndex].averageLoans);\n    });\n    console.log(value);\n    return value;\n  };\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleTableLine = item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setYears(e, item),\n      value: item.years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, item.averageLoans, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, item.netChargeoffsSum), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, formatAsPercentageCb(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => loadLineByYearsAndFieldId(item.years, item.fieldId),\n      onChange: e => setUserAdjustments(e, item),\n      value: item.userAdjustments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \" \", formatAsPercentageCb(item.futureRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onBlur: e => {\n        loadLineByYearsAndFieldId(item.years, item.fieldId);\n      },\n      onChange: e => setCurrentBalance(e, item),\n      value: item.currentBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.impliedResult)));\n  };\n\n  const totalTableLine = item => {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, item.label), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, item.years), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, item.averageLoans, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, item.netChargeoffsSum), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, formatAsPercentageCb(item.historicalRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, item.userAdjustments), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \" \", formatAsPercentageCb(item.futureRate)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, item.currentBalance), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, formatAsDolarNumberCb(item.impliedResult)));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Life of Loan Net Chargeoff Rate:\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Current Expected Credit Loss\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"(A)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"(B)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"=\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"(C)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"(D)\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"(D x C)\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"WARM\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"Avg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Agg\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"Historical\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"User\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"Future\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"Current\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"Implied\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"In Years\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, \"Net Chargeoffs\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, \"Adjustment \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"Rate\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, \"Balance\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, \"Result\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, lines.map(item => {\n    if (item.fieldId) {\n      return simpleTableLine(item);\n    }\n\n    return totalTableLine(item);\n  }), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    colSpan: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"20%\"), React.createElement(\"td\", {\n    style: {\n      background: \"lightblue\"\n    },\n    colSpan: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, \"Bank ALL\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: \"9874894\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"red\"\n    },\n    colSpan: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"Bank ALL\"), React.createElement(\"td\", {\n    style: {\n      background: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, \"465\")), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }), React.createElement(\"td\", {\n    style: {\n      background: \"green\"\n    },\n    colSpan: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Total CECL Surplus\"), React.createElement(\"td\", {\n    style: {\n      background: \"green\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"8979879\")))));\n}","map":{"version":3,"sources":["/Users/bruno/Desktop/Skills/React/interview/src/SummaryResults.jsx"],"names":["React","useEffect","useState","axios","SummaryResults","formatAsPercentageCb","formatAsDolarNumberCb","lines","setLines","fieldId","label","years","averageLoans","netChargeoffsSum","historicalRate","userAdjustments","futureRate","currentBalance","impliedResult","loadLineByYearsAndFieldId","get","then","result","data","linesCopy","slice","item","filter","parseFloat","calculeTotal","totalLine","reduce","total","currentItem","sum","console","log","getYearsTotal","value","map","line","totalIndex","length","setYears","e","target","copy","itemFromLines","t","setUserAdjustments","setCurrentBalance","simpleTableLine","totalTableLine","background"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function SummaryResults({\n  formatAsPercentageCb,\n  formatAsDolarNumberCb\n}) {\n  const [lines, setLines] = useState([\n    {\n      fieldId: 1,\n      label: \"Unsecured Credit Card Loans\",\n      years: 5,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 2,\n      label: \"New Vehicle Loans\",\n      years: 4,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    },\n    {\n      fieldId: 999,\n      label: \"Total Gross Loans\",\n      years: 0,\n      averageLoans: 0,\n      netChargeoffsSum: 0,\n      historicalRate: 0,\n      userAdjustments: 0,\n      futureRate: 0,\n      currentBalance: 0,\n      impliedResult: 0\n    }\n  ]);\n\n  const loadLineByYearsAndFieldId = (years, fieldId) => {\n    axios\n      .get(\n        `https://react-code-challenge.herokuapp.com/codeChallenge?fieldId=${fieldId}&years=${years}`\n      )\n      .then(result => {\n        const { averageLoans, netChargeoffsSum } = result.data;\n\n        let linesCopy = lines.slice();\n        let item = linesCopy.filter(item => item.fieldId === fieldId)[0];\n        item.averageLoans = averageLoans;\n        item.netChargeoffsSum = netChargeoffsSum;\n        item.historicalRate = netChargeoffsSum / averageLoans;\n\n        item.futureRate =\n          parseFloat(item.historicalRate) +\n          parseFloat(item.userAdjustments / 100);\n\n        item.impliedResult = item.futureRate * item.currentBalance;\n\n        setLines(linesCopy);\n\n        calculeTotal();\n      });\n  };\n\n  useEffect(() => {\n    loadLineByYearsAndFieldId(lines[0].years, lines[0].fieldId);\n    loadLineByYearsAndFieldId(lines[1].years, lines[1].fieldId);\n  }, []);\n\n  const calculeTotal = () => {\n    const totalLine = lines.reduce((total, currentItem) => {\n      if (currentItem.fieldId !== 999) {\n        const sum = {\n          averageLoans: total.averageLoans + currentItem.averageLoans,\n          netChargeoffsSum:\n            total.netChargeoffsSum + currentItem.netChargeoffsSum,\n\n          historicalRate: total.historicalRate + currentItem.historicalRate\n        };\n        return sum;\n      }\n\n      return total;\n    });\n\n    let linesCopy = lines.slice();\n    let item = linesCopy.filter(item => item.fieldId === 999)[0];\n\n    item.averageLoans = totalLine.averageLoans;\n    setLines(linesCopy);\n    console.log(\"TOTAL LIEN\");\n    console.log(item);\n\n    item.years = getYearsTotal();\n  };\n\n  const getYearsTotal = () => {\n    let value = lines.map(line => {\n      const totalIndex = lines.length - 1;\n      console.log(\"years\");\n      console.log(line.years);\n      console.log(\"yavgears\");\n      console.log(line.averageLoans);\n      console.log(\"total\");\n      console.log(totalIndex);\n      console.log(\"item\");\n      console.log(lines[totalIndex]);\n\n      return line.years * (line.averageLoans / lines[totalIndex].averageLoans);\n    });\n\n    console.log(value);\n    return value;\n  };\n\n  const setYears = (e, item) => {\n    if (e.target.value > 5 || e.target.value < 0) {\n      return;\n    }\n\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].years = e.target.value;\n    setLines(copy);\n  };\n\n  const setUserAdjustments = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].userAdjustments = e.target.value;\n    setLines(copy);\n  };\n\n  const setCurrentBalance = (e, item) => {\n    let copy = lines.slice();\n    let itemFromLines = copy.filter(t => t.fieldId === item.fieldId).slice();\n\n    itemFromLines[0].currentBalance = e.target.value;\n    setLines(copy);\n  };\n\n  const simpleTableLine = item => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>\n          <input\n            onBlur={e => loadLineByYearsAndFieldId(item.years, item.fieldId)}\n            onChange={e => setYears(e, item)}\n            value={item.years}\n          />\n        </td>\n        <td>{item.averageLoans} </td>\n        <td>{item.netChargeoffsSum}</td>\n        <td>{formatAsPercentageCb(item.historicalRate)}</td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => loadLineByYearsAndFieldId(item.years, item.fieldId)}\n            onChange={e => setUserAdjustments(e, item)}\n            value={item.userAdjustments}\n          />\n        </td>\n        <td></td>\n        <td> {formatAsPercentageCb(item.futureRate)}</td>\n        <td></td>\n        <td>\n          <input\n            onBlur={e => {\n              loadLineByYearsAndFieldId(item.years, item.fieldId);\n            }}\n            onChange={e => setCurrentBalance(e, item)}\n            value={item.currentBalance}\n          />\n        </td>\n        <td></td>\n        <td>{formatAsDolarNumberCb(item.impliedResult)}</td>\n      </tr>\n    );\n  };\n\n  const totalTableLine = item => {\n    return (\n      <tr>\n        <td>{item.label}</td>\n        <td>{item.years}</td>\n        <td>{item.averageLoans} </td>\n        <td>{item.netChargeoffsSum}</td>\n        <td>{formatAsPercentageCb(item.historicalRate)}</td>\n        <td></td>\n        <td>{item.userAdjustments}</td>\n        <td></td>\n        <td> {formatAsPercentageCb(item.futureRate)}</td>\n        <td></td>\n        <td>{item.currentBalance}</td>\n        <td></td>\n        <td>{formatAsDolarNumberCb(item.impliedResult)}</td>\n      </tr>\n    );\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td colSpan=\"5\">Life of Loan Net Chargeoff Rate:</td>\n            <td></td>\n            <td colSpan=\"3\">Current Expected Credit Loss</td>\n          </tr>\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td>(A)</td>\n            <td>+</td>\n            <td>(B)</td>\n            <td>=</td>\n            <td>(C)</td>\n            <td></td>\n            <td>(D)</td>\n            <td></td>\n            <td>(D x C)</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>WARM</td>\n            <td>Avg</td>\n            <td>Agg</td>\n            <td>Historical</td>\n            <td></td>\n            <td>User</td>\n            <td></td>\n            <td>Future</td>\n            <td></td>\n            <td>Current</td>\n            <td></td>\n            <td>Implied</td>\n          </tr>\n          <tr>\n            <td></td>\n            <td>In Years</td>\n            <td>Balance</td>\n            <td>Net Chargeoffs</td>\n            <td>Rate</td>\n            <td></td>\n            <td>Adjustment </td>\n            <td></td>\n            <td>Rate</td>\n            <td></td>\n            <td>Balance</td>\n            <td></td>\n            <td>Result</td>\n          </tr>\n        </thead>\n        <tbody>\n          {lines.map(item => {\n            if (item.fieldId) {\n              return simpleTableLine(item);\n            }\n            return totalTableLine(item);\n          })}\n          <tr>\n            <td colSpan=\"4\"></td>\n            <td style={{ background: \"lightblue\" }} colSpan=\"5\"></td>\n            <td style={{ background: \"lightblue\" }}>20%</td>\n            <td style={{ background: \"lightblue\" }} colSpan=\"2\">\n              Bank ALL\n            </td>\n            <td>\n              <input value=\"9874894\" />\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"9\"></td>\n            <td style={{ background: \"red\" }}></td>\n            <td style={{ background: \"red\" }} colSpan=\"2\">\n              Bank ALL\n            </td>\n            <td style={{ background: \"red\" }}>465</td>\n          </tr>\n          <tr>\n            <td colSpan=\"9\"></td>\n            <td style={{ background: \"green\" }}></td>\n            <td style={{ background: \"green\" }} colSpan=\"2\">\n              Total CECL Surplus\n            </td>\n            <td style={{ background: \"green\" }}>8979879</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}